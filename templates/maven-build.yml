parameters:
  - name: workDir
    displayName: Working directory
    type: string

  - name: outputFolder
    displayName: Output folder
    type: string
    default: 'target'

  - name: javaVersion
    displayName: Java's version
    type: string
    default: '17'
    values:
      - '8'
      - '11'
      - '17'

  - name: mavenVersion
    displayName: Maven version
    type: string
    default: '3.6.3'

  - name: mavenGoals
    displayName: Maven goals
    type: string
    default: 'clean package -B -e'

  - name: mavenOpts
    displayName: Maven opts
    type: string
    default: ''

  - name: mavenUsername
    displayName: Maven username
    type: string
    default: ''

  - name: mavenPassword
    displayName: Maven password
    type: string
    default: ''

  - name: isUseFeed
    displayName: Connect to Azure Feed
    type: string
    default: 'true'

  - name: isUseCache
    displayName: Use cache for dependencies
    type: string
    default: 'true'

  - name: mavenCacheFolder
    displayName: Maven cache folder
    type: string
    default: $(Pipeline.Workspace)/.m2/repository

  - name: mavenUrl
    displayName: Maven url
    type: string
    default: ''

  - name: mavenSettingsXmlPath
    displayName: Maven settings.xml path
    type: string
    default: ''

  - name: preSteps
    type: stepList
    default: []

  - name: postSteps
    type: stepList
    default: []

steps:
  - ${{ parameters.preSteps }}

  - bash: |
      wget https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/${MAVEN_VERSION}/apache-maven-${MAVEN_VERSION}-bin.zip
    env:
      MAVEN_VERSION: ${{ parameters.mavenVersion }}
    displayName: Download Maven ${{ parameters.mavenVersion }}

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'apache-maven-${{ parameters.mavenVersion }}-bin.zip'
      destinationFolder: '$(build.sourcesdirectory)/maven'

  - script: |
      echo "##vso[task.setvariable variable=M2_HOME]${MAVEN_PATH}"
      echo "##vso[task.setvariable variable=MAVEN_HOME]${MAVEN_PATH}"
      echo "##vso[task.prependpath]${MAVEN_PATH}/bin"

      echo "##vso[task.setvariable variable=JAVA_HOME]${!JAVA_PATH}"
      echo "##vso[task.prependpath]${JAVA_HOME}/bin"
    env:
      MAVEN_PATH: $(build.sourcesdirectory)/maven/apache-maven-${{ parameters.mavenVersion }}
      JAVA_PATH: JAVA_HOME_${{ parameters.javaVersion }}_X64
    displayName: Set Java ${{ parameters.javaVersion }}

  - script: |
      mvn --version
    displayName: Maven version

  - bash: |
      COMMAND_ARGS=${MAVEN_GOALS}

      if [[ "${IS_USE_CACHE}" == "true" ]]
      then
        COMMAND_ARGS="${COMMAND_ARGS} -Dmaven.repo.local=${MAVEN_CACHE_FOLDER}"
      fi

      if [[ "${IS_USE_FEED}" == "true" ]]
      then
        COMMAND_ARGS="${COMMAND_ARGS} -Dserver.url=${MAVEN_URL} -Dserver.username=${MAVEN_USERNAME} -Dserver.password=${MAVEN_PASSWORD} -gs=${MAVEN_SETTINGS_XML_PATH}"
      fi

      echo "##vso[task.setvariable variable=command_args]${COMMAND_ARGS}"
    env:
      IS_USE_CACHE: ${{ parameters.isUseCache }}
      IS_USE_FEED: ${{ parameters.isUseFeed }}
      MAVEN_GOALS: ${{ parameters.mavenGoals }}
      MAVEN_CACHE_FOLDER: ${{ parameters.mavenCacheFolder }}
      MAVEN_URL: ${{ parameters.mavenUrl }}
      MAVEN_USERNAME: ${{ parameters.mavenUsername }}
      MAVEN_PASSWORD: ${{ parameters.mavenPassword }}
      MAVEN_SETTINGS_XML_PATH: ${{ parameters.mavenSettingsXmlPath }}
    displayName: Build command args

  - ${{ if eq(parameters.isUseCache, true) }}:
      - task: Cache@2
        inputs:
          key: 'maven | "$(Agent.OS)" | **/pom.xml'
          restoreKeys: |
            maven | "$(Agent.OS)"
            maven
          path: ${{ parameters.mavenCacheFolder }}
        displayName: Cache Maven local repo

  - script: |
      mvn ${MAVEN_COMMAND_ARGS}
    env:
      MAVEN_COMMAND_ARGS: $(command_args)
    workingDirectory: ${{ parameters.workDir }}
    displayName: Maven build

  - task: CopyFiles@2
    displayName: 'Copy libs to: $(build.artifactstagingdirectory)'
    inputs:
      SourceFolder: '${{ parameters.workDir }}/${{ parameters.outputFolder }}'
      Contents: |
        *.jar
        *.war
      TargetFolder: '$(build.artifactstagingdirectory)'
      CleanTargetFolder: false
      OverWrite: true

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(build.artifactstagingdirectory)'
      artifactName: output

  - ${{ parameters.postSteps }}
