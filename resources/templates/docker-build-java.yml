parameters:
  - name: workDir
    displayName: Working directory
    type: string
    default: $(System.ArtifactsDirectory)

  - name: artifactName
    displayName: Artifact name
    type: string
    default: output

  - name: targetJarPathPattern
    displayName: Jar path pattern
    type: string

  - name: dockerfilePath
    displayName: Dockerfile path
    type: string

  - name: dockerImageName
    displayName: Docker image name
    type: string

  - name: dockerImageVersion
    displayName: Docker image version
    type: string

  - name: isPushImageToRegistry
    displayName: Push docker image to registry
    type: string
    default: 'false'

  - name: dockerServerUri
    displayName: Uri of docker
    type: string

  - name: dockerServerUsername
    displayName: Username of docker
    type: string

  - name: dockerServerPassword
    displayName: Password of docker
    type: string

  - name: preSteps
    type: stepList
    default: []

  - name: postSteps
    type: stepList
    default: []

steps:
  - ${{ parameters.preSteps }}

  - task: DownloadBuildArtifacts@1
    inputs:
      buildType: 'current'
      downloadType: 'single'
      downloadPath: ${{ parameters.workDir }}
      artifactName: ${{ parameters.artifactName }}

  - bash: |
      tree .
    workingDirectory: ${{ parameters.workDir }}
    displayName: Verify artifact content

  - bash: |
      echo "##[group]Used Variables"
      echo "INFO: ${TARGET_JAR_PATH_PATTERN}"
      echo "INFO: ${DOCKERFILE_PATH}"
      echo "INFO: ${DOCKER_IMAGE_NAME}"
      echo "INFO: ${DOCKER_IMAGE_VERSION}"
      echo "##[endgroup]"

      echo "##[section]INFO: Copy Dockerfile"
      cp ${DOCKERFILE_PATH} Dockerfile

      echo "##[section]INFO: Start Docker build"
      docker build \
      --build-arg JAR_FILE="${TARGET_JAR_PATH_PATTERN}" \
      -t "${DOCKER_SERVER_URI}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION}" \
      -f Dockerfile .
    env:
      TARGET_JAR_PATH_PATTERN: ${{ parameters.targetJarPathPattern }}
      DOCKERFILE_PATH: ${{ parameters.dockerfilePath }}
      DOCKER_SERVER_URI: ${{ parameters.dockerServerUri }}
      DOCKER_IMAGE_NAME: ${{ parameters.dockerImageName }}
      DOCKER_IMAGE_VERSION: ${{ parameters.dockerImageVersion }}
    workingDirectory: ${{ parameters.workDir }}/${{ parameters.artifactName }}
    displayName: Docker build image

  - ${{ if eq(parameters.isPushImageToRegistry, 'true') }}:
    - bash: |
        docker login ${DOCKER_SERVER_URI} \
        -u ${DOCKER_SERVER_USERNAME} \
        -p ${DOCKER_SERVER_PASSWORD}
      env:
        DOCKER_SERVER_URI: ${{ parameters.dockerServerUri }}
        DOCKER_SERVER_USERNAME: ${{ parameters.dockerServerUsername }}
        DOCKER_SERVER_PASSWORD: ${{ parameters.dockerServerPassword }}
      workingDirectory: ${{ parameters.workDir }}/${{ parameters.artifactName }}
      displayName: Docker login

    - bash: |
        docker push \
        "${DOCKER_SERVER_URI}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_VERSION}" \
      env:
        DOCKER_SERVER_URI: ${{ parameters.dockerServerUri }}
        DOCKER_IMAGE_NAME: ${{ parameters.dockerImageName }}
        DOCKER_IMAGE_VERSION: ${{ parameters.dockerImageVersion }}
      workingDirectory: ${{ parameters.workDir }}/${{ parameters.artifactName }}
      displayName: Docker push

  - ${{ parameters.postSteps }}
